"""GPT-J script for testing single inference."""
from absl import app
from absl import flags
from absl import logging
import numpy as np
from saxml.client.python import sax
import transformers

from google3.util.task.python import error


_SAX_CELL = flags.DEFINE_string(
    'sax_cell',
    '/sax/mrasquinha',
    'SAX cell of the admin server.',
)
_MODEL_NAME = flags.DEFINE_string(
    'model_name', 'test1', 'model name to publish.'
)
_WAIT = flags.DEFINE_integer(
    'wait',
    1000,
    'Model loading wait time.',
)
_TEST_TEXT = flags.DEFINE_string(
    'test_text',
    '21106,318,281,12064,326,8477,257,4876,11,20312,351,281,5128,326,3769,2252,4732,13,19430,257,2882,326,20431,32543,262,2581,13,198,198,21017,46486,25,198,13065,3876,1096,262,1708,1705,2708,25,198,198,21017,23412,25,198,7,18474,8,3666,3015,329,9190,286,262,6280,2925,284,19569,3059,4509,13,383,1966,8386,4041,17362,18086,2904,6294,572,257,2168,286,3049,21591,290,285,6972,866,257,1448,286,3009,24727,508,925,262,7457,286,28990,31016,290,11363,12,20676,3628,3651,546,3059,4509,338,16330,4957,13,383,10512,2067,11,7909,1473,1576,11,319,3945,1679,11,618,3059,4509,2826,262,2597,286,257,6613,2988,13,679,1908,257,6126,19833,8306,465,4957,11,12300,1525,11,319,852,6292,284,4849,303,38739,2059,11,810,673,1183,711,2705,1894,13,632,1100,25,366,18649,46714,284,12300,1525,3059,4509,508,481,7078,329,262,4849,303,38739,16732,1306,614,3228,851,19569,3059,4509,4275,469,71,4359,2548,16725,16699,3393,11,9109,1625,287,422,1862,1450,11,1844,18981,508,5729,3940,3059,4509,319,3009,13,383,12665,2952,1816,422,40620,11,284,23387,11,284,1128,1018,22057,13,25238,82,286,7262,547,2219,13,383,12665,547,13140,11,290,262,5504,547,4838,706,428,1621,1816,14416,13,887,407,878,3059,4509,7907,617,286,262,4263,290,4481,606,319,465,4130,13,1867,373,531,546,1596,12,1941,12,727,12300,1525,3059,4509,2492,470,655,43283,13,632,373,34942,290,33390,13,1867,373,531,2492,470,655,1612,290,13400,13,632,373,11123,290,14343,13,1081,257,2560,11,340,338,262,1611,286,1517,326,1838,345,36437,534,5471,284,1171,460,278,355,257,12219,9837,329,884,44780,507,13,2312,22795,2569,9875,1371,743,423,1807,484,714,7808,287,262,11854,286,18685,11,262,3297,326,867,423,1282,284,1607,422,1919,2056,5043,11,810,345,1254,1479,284,307,257,220,47034,1692,852,780,11,345,892,11,645,530,481,1683,1064,503,508,345,1107,389,290,1745,345,16689,329,534,2456,13,1002,523,11,484,1807,2642,13,1119,3521,470,7808,13,1119,547,1043,503,11,290,484,1392,262,46692,1359,484,523,5527,306,20143,13,6930,284,9955,13,4784,284,3059,4509,11,508,925,340,465,4365,284,2610,866,777,1126,83,1040,290,787,1654,883,484,11602,351,760,508,484,1107,389,11,734,661,423,1541,3432,257,2756,2233,284,511,12665,13,1881,373,257,3710,1221,474,8337,379,257,2055,4152,287,968,8221,11,508,373,9951,11,290,262,584,373,257,636,12,2435,7846,18583,329,262,968,1971,20082,11,508,373,6294,13,32265,276,326,428,318,281,1672,286,3446,262,1611,286,10075,16308,1112,326,5983,617,17366,284,4589,7341,11,3059,4509,318,635,3612,546,2263,2742,2223,1028,617,286,262,584,661,2950,13,38990,329,683,13,314,1101,1654,326,11,477,1973,2253,11,47713,351,14850,1377,706,3555,617,286,262,12361,1243,326,547,531,546,428,1862,2576,1377,389,22672,278,379,3059,4509,338,2116,12,13716,13,314,423,734,14850,286,616,898,11,290,339,338,257,1365,582,621,502,13,1002,1683,612,373,257,1339,810,1534,19689,12,2777,413,278,6428,3642,658,20143,284,423,511,28552,18989,503,351,19533,11,428,318,340,13,1406,644,3224,17218,460,356,3197,11,290,644,4025,11658,460,356,2193,11,422,428,10059,475,20039,17661,286,1468,12,28776,279,17117,290,649,69,22393,2056,30,1318,389,257,1178,13,383,717,318,546,18241,11,262,845,1517,326,262,1862,1450,508,4481,777,5938,913,6218,547,2111,284,3368,13,887,3059,4509,3636,470,1309,606,13,1629,511,1266,11,1919,2056,5043,588,3009,11,3203,11,10767,290,1854,1249,262,7373,262,1321,290,262,2615,286,257,2565,286,2055,13,1629,511,5290,11,484,1716,4875,6450,29305,290,17355,9519,810,661,892,423,257,5964,284,2984,1350,14150,1231,1719,284,5490,546,6948,13,775,761,284,22517,4040,588,428,326,7719,3744,2691,18241,13,1318,338,635,1223,284,307,531,546,14153,3397,11,290,703,6393,484,389,284,257,1762,3592,13,775,815,991,307,5213,546,883,625,11235,13967,3397,508,20599,588,23890,422,1310,4652,284,1693,9299,13,775,6584,470,14310,37150,674,3988,11,290,1394,606,422,2712,24349,11,290,788,1650,1088,11263,1521,484,821,2705,11,44295,11,290,2526,12,64,4399,13,887,14153,3397,1377,262,1611,508,7614,511,3988,422,1103,3514,1377,1239,467,503,286,3918,13,317,2560,338,1353,1693,318,284,1805,465,1751,13,3059,4509,750,465,1693,13,9461,11,340,338,2861,30047,2506,326,4925,286,5408,857,407,1612,4925,422,3173,11,5423,11,290,9027,326,815,5698,534,4069,13,1318,389,1243,345,836,470,910,13,1318,389,13215,11,2842,326,356,1607,345,284,17438,523,345,836,470,3246,1096,584,661,393,2222,10195,2402,3511,11,534,2460,11,290,534,1641,13,1002,345,836,470,423,1919,4678,11,345,836,470,5594,319,1919,2056,13,383,12665,787,345,266,924,13,887,287,428,1621,11,345,1183,991,1064,6088,284,8212,546,13,770,2187,10512,34660,780,3059,4509,373,6613,286,465,4957,13,2735,11,1813,703,339,22798,11,356,477,423,1738,284,307,6613,286,683,13,20126,764,198,198,21017,18261,25',
    'Test text.',
)


def main(argv):
  del argv
  sax_cell = _SAX_CELL.value
  model_name = _MODEL_NAME.value
  model_path = f'{sax_cell}/{model_name}'
  test_text = _TEST_TEXT.value

  logging.info('Initiate language model for inferencing ... %s', model_path)
  model = sax.Model(model_path)
  language_model = model.LM()
  option = sax.ModelOptions()
  option.SetTimeout(_WAIT.value)

  tk_path = '/cns/ik-d/home/mrasquinha/llm_6B/hf_tokenizer'
  tokenizer = transformers.GPT2Tokenizer.from_pretrained(
      tk_path, model_max_length=2048, padding_side='left', use_fast=False
  )
  try:
    logging.info('Generating testing inferencing result ... ')
    inference_result = language_model.Generate(test_text, option)
    pred = np.fromstring(inference_result[0][0], dtype=int, sep=',')
    res = tokenizer.decode(pred)
  except error.StatusNotOk as e:
    logging.info(e)
  else:
    logging.info('Generated inference result: %s', res)


if __name__ == '__main__':
  app.run(main)
