#pragma once
#include <stdint.h>


/**
 * rn50_backbone_bs256
 * @param backbone_output output tensor, [s8 [256, 2048, 7, 7] @ ACDB], real dims is [256, 7, 7, 2048]
 * @param backbone_input input tensor, [s8 [256, 64, 56, 56] @ ACDB], real dims is [256, 56, 56, 64]
 * @param res2a_weight_b input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2a_bias_b input tensor, [f32 [256] @ A]
 * @param res2a_weight_0 input tensor, [f32 [64, 64, 1, 1] @ ABCD]
 * @param res2a_bias_0 input tensor, [f32 [64] @ A]
 * @param res2a_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2a_bias_1 input tensor, [f32 [64] @ A]
 * @param res2a_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2a_bias_2 input tensor, [f32 [256] @ A]
 * @param res2b_weight_0 input tensor, [f32 [64, 256, 1, 1] @ ABCD]
 * @param res2b_bias_0 input tensor, [f32 [64] @ A]
 * @param res2b_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2b_bias_1 input tensor, [f32 [64] @ A]
 * @param res2b_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2b_bias_2 input tensor, [f32 [256] @ A]
 * @param res2c_weight_0 input tensor, [f32 [64, 256, 1, 1] @ ABCD]
 * @param res2c_bias_0 input tensor, [f32 [64] @ A]
 * @param res2c_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2c_bias_1 input tensor, [f32 [64] @ A]
 * @param res2c_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2c_bias_2 input tensor, [f32 [256] @ A]
 * @param res3a_weight_b input tensor, [f32 [512, 256, 1, 1] @ ABCD]
 * @param res3a_bias_b input tensor, [f32 [512] @ A]
 * @param res3a_weight_0 input tensor, [f32 [128, 256, 1, 1] @ ABCD]
 * @param res3a_bias_0 input tensor, [f32 [128] @ A]
 * @param res3a_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3a_bias_1 input tensor, [f32 [128] @ A]
 * @param res3a_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3a_bias_2 input tensor, [f32 [512] @ A]
 * @param res3b_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3b_bias_0 input tensor, [f32 [128] @ A]
 * @param res3b_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3b_bias_1 input tensor, [f32 [128] @ A]
 * @param res3b_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3b_bias_2 input tensor, [f32 [512] @ A]
 * @param res3c_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3c_bias_0 input tensor, [f32 [128] @ A]
 * @param res3c_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3c_bias_1 input tensor, [f32 [128] @ A]
 * @param res3c_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3c_bias_2 input tensor, [f32 [512] @ A]
 * @param res3d_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3d_bias_0 input tensor, [f32 [128] @ A]
 * @param res3d_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3d_bias_1 input tensor, [f32 [128] @ A]
 * @param res3d_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3d_bias_2 input tensor, [f32 [512] @ A]
 * @param res4a_weight_b input tensor, [f32 [1024, 512, 1, 1] @ ABCD]
 * @param res4a_bias_b input tensor, [f32 [1024] @ A]
 * @param res4a_weight_0 input tensor, [f32 [256, 512, 1, 1] @ ABCD]
 * @param res4a_bias_0 input tensor, [f32 [256] @ A]
 * @param res4a_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4a_bias_1 input tensor, [f32 [256] @ A]
 * @param res4a_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4a_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4b_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4b_bias_0 input tensor, [f32 [256] @ A]
 * @param res4b_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4b_bias_1 input tensor, [f32 [256] @ A]
 * @param res4b_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4b_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4c_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4c_bias_0 input tensor, [f32 [256] @ A]
 * @param res4c_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4c_bias_1 input tensor, [f32 [256] @ A]
 * @param res4c_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4c_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4d_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4d_bias_0 input tensor, [f32 [256] @ A]
 * @param res4d_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4d_bias_1 input tensor, [f32 [256] @ A]
 * @param res4d_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4d_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4e_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4e_bias_0 input tensor, [f32 [256] @ A]
 * @param res4e_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4e_bias_1 input tensor, [f32 [256] @ A]
 * @param res4e_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4e_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4f_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4f_bias_0 input tensor, [f32 [256] @ A]
 * @param res4f_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4f_bias_1 input tensor, [f32 [256] @ A]
 * @param res4f_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4f_bias_2 input tensor, [f32 [1024] @ A]
 * @param res5a_weight_b input tensor, [f32 [2048, 1024, 1, 1] @ ABCD]
 * @param res5a_bias_b input tensor, [f32 [2048] @ A]
 * @param res5a_weight_0 input tensor, [f32 [512, 1024, 1, 1] @ ABCD]
 * @param res5a_bias_0 input tensor, [f32 [512] @ A]
 * @param res5a_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5a_bias_1 input tensor, [f32 [512] @ A]
 * @param res5a_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5a_bias_2 input tensor, [f32 [2048] @ A]
 * @param res5b_weight_0 input tensor, [f32 [512, 2048, 1, 1] @ ABCD]
 * @param res5b_bias_0 input tensor, [f32 [512] @ A]
 * @param res5b_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5b_bias_1 input tensor, [f32 [512] @ A]
 * @param res5b_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5b_bias_2 input tensor, [f32 [2048] @ A]
 * @param res5c_weight_0 input tensor, [f32 [512, 2048, 1, 1] @ ABCD]
 * @param res5c_bias_0 input tensor, [f32 [512] @ A]
 * @param res5c_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5c_bias_1 input tensor, [f32 [512] @ A]
 * @param res5c_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5c_bias_2 input tensor, [f32 [2048] @ A]
**/
extern "C" void rn50_backbone_wrapper_bs256(int8_t* __restrict__ backbone_output, int64_t* __restrict__ input_pointers, float* __restrict__ final_out, float* __restrict__ res2a_weight_b, float* __restrict__ res2a_bias_b, float* __restrict__ res2a_weight_0, float* __restrict__ res2a_bias_0, float* __restrict__ res2a_weight_1, float* __restrict__ res2a_bias_1, float* __restrict__ res2a_weight_2, float* __restrict__ res2a_bias_2, float* __restrict__ res2b_weight_0, float* __restrict__ res2b_bias_0, float* __restrict__ res2b_weight_1, float* __restrict__ res2b_bias_1, float* __restrict__ res2b_weight_2, float* __restrict__ res2b_bias_2, float* __restrict__ res2c_weight_0, float* __restrict__ res2c_bias_0, float* __restrict__ res2c_weight_1, float* __restrict__ res2c_bias_1, float* __restrict__ res2c_weight_2, float* __restrict__ res2c_bias_2, float* __restrict__ res3a_weight_b, float* __restrict__ res3a_bias_b, float* __restrict__ res3a_weight_0, float* __restrict__ res3a_bias_0, float* __restrict__ res3a_weight_1, float* __restrict__ res3a_bias_1, float* __restrict__ res3a_weight_2, float* __restrict__ res3a_bias_2, float* __restrict__ res3b_weight_0, float* __restrict__ res3b_bias_0, float* __restrict__ res3b_weight_1, float* __restrict__ res3b_bias_1, float* __restrict__ res3b_weight_2, float* __restrict__ res3b_bias_2, float* __restrict__ res3c_weight_0, float* __restrict__ res3c_bias_0, float* __restrict__ res3c_weight_1, float* __restrict__ res3c_bias_1, float* __restrict__ res3c_weight_2, float* __restrict__ res3c_bias_2, float* __restrict__ res3d_weight_0, float* __restrict__ res3d_bias_0, float* __restrict__ res3d_weight_1, float* __restrict__ res3d_bias_1, float* __restrict__ res3d_weight_2, float* __restrict__ res3d_bias_2, float* __restrict__ res4a_weight_b, float* __restrict__ res4a_bias_b, float* __restrict__ res4a_weight_0, float* __restrict__ res4a_bias_0, float* __restrict__ res4a_weight_1, float* __restrict__ res4a_bias_1, float* __restrict__ res4a_weight_2, float* __restrict__ res4a_bias_2, float* __restrict__ res4b_weight_0, float* __restrict__ res4b_bias_0, float* __restrict__ res4b_weight_1, float* __restrict__ res4b_bias_1, float* __restrict__ res4b_weight_2, float* __restrict__ res4b_bias_2, float* __restrict__ res4c_weight_0, float* __restrict__ res4c_bias_0, float* __restrict__ res4c_weight_1, float* __restrict__ res4c_bias_1, float* __restrict__ res4c_weight_2, float* __restrict__ res4c_bias_2, float* __restrict__ res4d_weight_0, float* __restrict__ res4d_bias_0, float* __restrict__ res4d_weight_1, float* __restrict__ res4d_bias_1, float* __restrict__ res4d_weight_2, float* __restrict__ res4d_bias_2, float* __restrict__ res4e_weight_0, float* __restrict__ res4e_bias_0, float* __restrict__ res4e_weight_1, float* __restrict__ res4e_bias_1, float* __restrict__ res4e_weight_2, float* __restrict__ res4e_bias_2, float* __restrict__ res4f_weight_0, float* __restrict__ res4f_bias_0, float* __restrict__ res4f_weight_1, float* __restrict__ res4f_bias_1, float* __restrict__ res4f_weight_2, float* __restrict__ res4f_bias_2, float* __restrict__ res5a_weight_b, float* __restrict__ res5a_bias_b, float* __restrict__ res5a_weight_0, float* __restrict__ res5a_bias_0, float* __restrict__ res5a_weight_1, float* __restrict__ res5a_bias_1, float* __restrict__ res5a_weight_2, float* __restrict__ res5a_bias_2, float* __restrict__ res5b_weight_0, float* __restrict__ res5b_bias_0, float* __restrict__ res5b_weight_1, float* __restrict__ res5b_bias_1, float* __restrict__ res5b_weight_2, float* __restrict__ res5b_bias_2, float* __restrict__ res5c_weight_0, float* __restrict__ res5c_bias_0, float* __restrict__ res5c_weight_1, float* __restrict__ res5c_bias_1, float* __restrict__ res5c_weight_2, float* __restrict__ res5c_bias_2) noexcept;

extern "C" void sc_init_rn50_backbone_wrapper_bs256(float* conv1_weight, float* conv1_bias, float* fc_weight, float* fc_bias);

/**
 * rn50_backbone_bs8
 * @param backbone_output output tensor, [s8 [8, 2048, 7, 7] @ ACDB], real dims is [8, 7, 7, 2048]
 * @param backbone_input input tensor, [s8 [8, 64, 56, 56] @ ACDB], real dims is [8, 56, 56, 64]
 * @param res2a_weight_b input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2a_bias_b input tensor, [f32 [256] @ A]
 * @param res2a_weight_0 input tensor, [f32 [64, 64, 1, 1] @ ABCD]
 * @param res2a_bias_0 input tensor, [f32 [64] @ A]
 * @param res2a_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2a_bias_1 input tensor, [f32 [64] @ A]
 * @param res2a_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2a_bias_2 input tensor, [f32 [256] @ A]
 * @param res2b_weight_0 input tensor, [f32 [64, 256, 1, 1] @ ABCD]
 * @param res2b_bias_0 input tensor, [f32 [64] @ A]
 * @param res2b_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2b_bias_1 input tensor, [f32 [64] @ A]
 * @param res2b_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2b_bias_2 input tensor, [f32 [256] @ A]
 * @param res2c_weight_0 input tensor, [f32 [64, 256, 1, 1] @ ABCD]
 * @param res2c_bias_0 input tensor, [f32 [64] @ A]
 * @param res2c_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2c_bias_1 input tensor, [f32 [64] @ A]
 * @param res2c_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2c_bias_2 input tensor, [f32 [256] @ A]
 * @param res3a_weight_b input tensor, [f32 [512, 256, 1, 1] @ ABCD]
 * @param res3a_bias_b input tensor, [f32 [512] @ A]
 * @param res3a_weight_0 input tensor, [f32 [128, 256, 1, 1] @ ABCD]
 * @param res3a_bias_0 input tensor, [f32 [128] @ A]
 * @param res3a_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3a_bias_1 input tensor, [f32 [128] @ A]
 * @param res3a_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3a_bias_2 input tensor, [f32 [512] @ A]
 * @param res3b_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3b_bias_0 input tensor, [f32 [128] @ A]
 * @param res3b_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3b_bias_1 input tensor, [f32 [128] @ A]
 * @param res3b_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3b_bias_2 input tensor, [f32 [512] @ A]
 * @param res3c_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3c_bias_0 input tensor, [f32 [128] @ A]
 * @param res3c_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3c_bias_1 input tensor, [f32 [128] @ A]
 * @param res3c_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3c_bias_2 input tensor, [f32 [512] @ A]
 * @param res3d_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3d_bias_0 input tensor, [f32 [128] @ A]
 * @param res3d_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3d_bias_1 input tensor, [f32 [128] @ A]
 * @param res3d_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3d_bias_2 input tensor, [f32 [512] @ A]
 * @param res4a_weight_b input tensor, [f32 [1024, 512, 1, 1] @ ABCD]
 * @param res4a_bias_b input tensor, [f32 [1024] @ A]
 * @param res4a_weight_0 input tensor, [f32 [256, 512, 1, 1] @ ABCD]
 * @param res4a_bias_0 input tensor, [f32 [256] @ A]
 * @param res4a_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4a_bias_1 input tensor, [f32 [256] @ A]
 * @param res4a_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4a_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4b_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4b_bias_0 input tensor, [f32 [256] @ A]
 * @param res4b_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4b_bias_1 input tensor, [f32 [256] @ A]
 * @param res4b_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4b_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4c_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4c_bias_0 input tensor, [f32 [256] @ A]
 * @param res4c_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4c_bias_1 input tensor, [f32 [256] @ A]
 * @param res4c_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4c_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4d_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4d_bias_0 input tensor, [f32 [256] @ A]
 * @param res4d_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4d_bias_1 input tensor, [f32 [256] @ A]
 * @param res4d_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4d_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4e_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4e_bias_0 input tensor, [f32 [256] @ A]
 * @param res4e_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4e_bias_1 input tensor, [f32 [256] @ A]
 * @param res4e_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4e_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4f_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4f_bias_0 input tensor, [f32 [256] @ A]
 * @param res4f_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4f_bias_1 input tensor, [f32 [256] @ A]
 * @param res4f_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4f_bias_2 input tensor, [f32 [1024] @ A]
 * @param res5a_weight_b input tensor, [f32 [2048, 1024, 1, 1] @ ABCD]
 * @param res5a_bias_b input tensor, [f32 [2048] @ A]
 * @param res5a_weight_0 input tensor, [f32 [512, 1024, 1, 1] @ ABCD]
 * @param res5a_bias_0 input tensor, [f32 [512] @ A]
 * @param res5a_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5a_bias_1 input tensor, [f32 [512] @ A]
 * @param res5a_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5a_bias_2 input tensor, [f32 [2048] @ A]
 * @param res5b_weight_0 input tensor, [f32 [512, 2048, 1, 1] @ ABCD]
 * @param res5b_bias_0 input tensor, [f32 [512] @ A]
 * @param res5b_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5b_bias_1 input tensor, [f32 [512] @ A]
 * @param res5b_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5b_bias_2 input tensor, [f32 [2048] @ A]
 * @param res5c_weight_0 input tensor, [f32 [512, 2048, 1, 1] @ ABCD]
 * @param res5c_bias_0 input tensor, [f32 [512] @ A]
 * @param res5c_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5c_bias_1 input tensor, [f32 [512] @ A]
 * @param res5c_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5c_bias_2 input tensor, [f32 [2048] @ A]
**/
extern "C" void rn50_backbone_wrapper_bs8(int8_t* __restrict__ backbone_output, int64_t* __restrict__ input_pointers, float* __restrict__ final_out, float* __restrict__ res2a_weight_b, float* __restrict__ res2a_bias_b, float* __restrict__ res2a_weight_0, float* __restrict__ res2a_bias_0, float* __restrict__ res2a_weight_1, float* __restrict__ res2a_bias_1, float* __restrict__ res2a_weight_2, float* __restrict__ res2a_bias_2, float* __restrict__ res2b_weight_0, float* __restrict__ res2b_bias_0, float* __restrict__ res2b_weight_1, float* __restrict__ res2b_bias_1, float* __restrict__ res2b_weight_2, float* __restrict__ res2b_bias_2, float* __restrict__ res2c_weight_0, float* __restrict__ res2c_bias_0, float* __restrict__ res2c_weight_1, float* __restrict__ res2c_bias_1, float* __restrict__ res2c_weight_2, float* __restrict__ res2c_bias_2, float* __restrict__ res3a_weight_b, float* __restrict__ res3a_bias_b, float* __restrict__ res3a_weight_0, float* __restrict__ res3a_bias_0, float* __restrict__ res3a_weight_1, float* __restrict__ res3a_bias_1, float* __restrict__ res3a_weight_2, float* __restrict__ res3a_bias_2, float* __restrict__ res3b_weight_0, float* __restrict__ res3b_bias_0, float* __restrict__ res3b_weight_1, float* __restrict__ res3b_bias_1, float* __restrict__ res3b_weight_2, float* __restrict__ res3b_bias_2, float* __restrict__ res3c_weight_0, float* __restrict__ res3c_bias_0, float* __restrict__ res3c_weight_1, float* __restrict__ res3c_bias_1, float* __restrict__ res3c_weight_2, float* __restrict__ res3c_bias_2, float* __restrict__ res3d_weight_0, float* __restrict__ res3d_bias_0, float* __restrict__ res3d_weight_1, float* __restrict__ res3d_bias_1, float* __restrict__ res3d_weight_2, float* __restrict__ res3d_bias_2, float* __restrict__ res4a_weight_b, float* __restrict__ res4a_bias_b, float* __restrict__ res4a_weight_0, float* __restrict__ res4a_bias_0, float* __restrict__ res4a_weight_1, float* __restrict__ res4a_bias_1, float* __restrict__ res4a_weight_2, float* __restrict__ res4a_bias_2, float* __restrict__ res4b_weight_0, float* __restrict__ res4b_bias_0, float* __restrict__ res4b_weight_1, float* __restrict__ res4b_bias_1, float* __restrict__ res4b_weight_2, float* __restrict__ res4b_bias_2, float* __restrict__ res4c_weight_0, float* __restrict__ res4c_bias_0, float* __restrict__ res4c_weight_1, float* __restrict__ res4c_bias_1, float* __restrict__ res4c_weight_2, float* __restrict__ res4c_bias_2, float* __restrict__ res4d_weight_0, float* __restrict__ res4d_bias_0, float* __restrict__ res4d_weight_1, float* __restrict__ res4d_bias_1, float* __restrict__ res4d_weight_2, float* __restrict__ res4d_bias_2, float* __restrict__ res4e_weight_0, float* __restrict__ res4e_bias_0, float* __restrict__ res4e_weight_1, float* __restrict__ res4e_bias_1, float* __restrict__ res4e_weight_2, float* __restrict__ res4e_bias_2, float* __restrict__ res4f_weight_0, float* __restrict__ res4f_bias_0, float* __restrict__ res4f_weight_1, float* __restrict__ res4f_bias_1, float* __restrict__ res4f_weight_2, float* __restrict__ res4f_bias_2, float* __restrict__ res5a_weight_b, float* __restrict__ res5a_bias_b, float* __restrict__ res5a_weight_0, float* __restrict__ res5a_bias_0, float* __restrict__ res5a_weight_1, float* __restrict__ res5a_bias_1, float* __restrict__ res5a_weight_2, float* __restrict__ res5a_bias_2, float* __restrict__ res5b_weight_0, float* __restrict__ res5b_bias_0, float* __restrict__ res5b_weight_1, float* __restrict__ res5b_bias_1, float* __restrict__ res5b_weight_2, float* __restrict__ res5b_bias_2, float* __restrict__ res5c_weight_0, float* __restrict__ res5c_bias_0, float* __restrict__ res5c_weight_1, float* __restrict__ res5c_bias_1, float* __restrict__ res5c_weight_2, float* __restrict__ res5c_bias_2) noexcept;

extern "C" void sc_init_rn50_backbone_wrapper_bs8(float* conv1_weight, float* conv1_bias, float* fc_weight, float* fc_bias);

/**
 * rn50_backbone_bs4
 * @param backbone_output output tensor, [s8 [4, 2048, 7, 7] @ ACDB], real dims is [4, 7, 7, 2048]
 * @param backbone_input input tensor, [s8 [4, 64, 56, 56] @ ACDB], real dims is [4, 56, 56, 64]
 * @param res2a_weight_b input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2a_bias_b input tensor, [f32 [256] @ A]
 * @param res2a_weight_0 input tensor, [f32 [64, 64, 1, 1] @ ABCD]
 * @param res2a_bias_0 input tensor, [f32 [64] @ A]
 * @param res2a_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2a_bias_1 input tensor, [f32 [64] @ A]
 * @param res2a_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2a_bias_2 input tensor, [f32 [256] @ A]
 * @param res2b_weight_0 input tensor, [f32 [64, 256, 1, 1] @ ABCD]
 * @param res2b_bias_0 input tensor, [f32 [64] @ A]
 * @param res2b_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2b_bias_1 input tensor, [f32 [64] @ A]
 * @param res2b_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2b_bias_2 input tensor, [f32 [256] @ A]
 * @param res2c_weight_0 input tensor, [f32 [64, 256, 1, 1] @ ABCD]
 * @param res2c_bias_0 input tensor, [f32 [64] @ A]
 * @param res2c_weight_1 input tensor, [f32 [64, 64, 3, 3] @ ABCD]
 * @param res2c_bias_1 input tensor, [f32 [64] @ A]
 * @param res2c_weight_2 input tensor, [f32 [256, 64, 1, 1] @ ABCD]
 * @param res2c_bias_2 input tensor, [f32 [256] @ A]
 * @param res3a_weight_b input tensor, [f32 [512, 256, 1, 1] @ ABCD]
 * @param res3a_bias_b input tensor, [f32 [512] @ A]
 * @param res3a_weight_0 input tensor, [f32 [128, 256, 1, 1] @ ABCD]
 * @param res3a_bias_0 input tensor, [f32 [128] @ A]
 * @param res3a_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3a_bias_1 input tensor, [f32 [128] @ A]
 * @param res3a_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3a_bias_2 input tensor, [f32 [512] @ A]
 * @param res3b_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3b_bias_0 input tensor, [f32 [128] @ A]
 * @param res3b_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3b_bias_1 input tensor, [f32 [128] @ A]
 * @param res3b_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3b_bias_2 input tensor, [f32 [512] @ A]
 * @param res3c_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3c_bias_0 input tensor, [f32 [128] @ A]
 * @param res3c_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3c_bias_1 input tensor, [f32 [128] @ A]
 * @param res3c_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3c_bias_2 input tensor, [f32 [512] @ A]
 * @param res3d_weight_0 input tensor, [f32 [128, 512, 1, 1] @ ABCD]
 * @param res3d_bias_0 input tensor, [f32 [128] @ A]
 * @param res3d_weight_1 input tensor, [f32 [128, 128, 3, 3] @ ABCD]
 * @param res3d_bias_1 input tensor, [f32 [128] @ A]
 * @param res3d_weight_2 input tensor, [f32 [512, 128, 1, 1] @ ABCD]
 * @param res3d_bias_2 input tensor, [f32 [512] @ A]
 * @param res4a_weight_b input tensor, [f32 [1024, 512, 1, 1] @ ABCD]
 * @param res4a_bias_b input tensor, [f32 [1024] @ A]
 * @param res4a_weight_0 input tensor, [f32 [256, 512, 1, 1] @ ABCD]
 * @param res4a_bias_0 input tensor, [f32 [256] @ A]
 * @param res4a_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4a_bias_1 input tensor, [f32 [256] @ A]
 * @param res4a_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4a_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4b_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4b_bias_0 input tensor, [f32 [256] @ A]
 * @param res4b_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4b_bias_1 input tensor, [f32 [256] @ A]
 * @param res4b_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4b_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4c_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4c_bias_0 input tensor, [f32 [256] @ A]
 * @param res4c_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4c_bias_1 input tensor, [f32 [256] @ A]
 * @param res4c_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4c_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4d_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4d_bias_0 input tensor, [f32 [256] @ A]
 * @param res4d_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4d_bias_1 input tensor, [f32 [256] @ A]
 * @param res4d_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4d_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4e_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4e_bias_0 input tensor, [f32 [256] @ A]
 * @param res4e_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4e_bias_1 input tensor, [f32 [256] @ A]
 * @param res4e_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4e_bias_2 input tensor, [f32 [1024] @ A]
 * @param res4f_weight_0 input tensor, [f32 [256, 1024, 1, 1] @ ABCD]
 * @param res4f_bias_0 input tensor, [f32 [256] @ A]
 * @param res4f_weight_1 input tensor, [f32 [256, 256, 3, 3] @ ABCD]
 * @param res4f_bias_1 input tensor, [f32 [256] @ A]
 * @param res4f_weight_2 input tensor, [f32 [1024, 256, 1, 1] @ ABCD]
 * @param res4f_bias_2 input tensor, [f32 [1024] @ A]
 * @param res5a_weight_b input tensor, [f32 [2048, 1024, 1, 1] @ ABCD]
 * @param res5a_bias_b input tensor, [f32 [2048] @ A]
 * @param res5a_weight_0 input tensor, [f32 [512, 1024, 1, 1] @ ABCD]
 * @param res5a_bias_0 input tensor, [f32 [512] @ A]
 * @param res5a_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5a_bias_1 input tensor, [f32 [512] @ A]
 * @param res5a_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5a_bias_2 input tensor, [f32 [2048] @ A]
 * @param res5b_weight_0 input tensor, [f32 [512, 2048, 1, 1] @ ABCD]
 * @param res5b_bias_0 input tensor, [f32 [512] @ A]
 * @param res5b_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5b_bias_1 input tensor, [f32 [512] @ A]
 * @param res5b_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5b_bias_2 input tensor, [f32 [2048] @ A]
 * @param res5c_weight_0 input tensor, [f32 [512, 2048, 1, 1] @ ABCD]
 * @param res5c_bias_0 input tensor, [f32 [512] @ A]
 * @param res5c_weight_1 input tensor, [f32 [512, 512, 3, 3] @ ABCD]
 * @param res5c_bias_1 input tensor, [f32 [512] @ A]
 * @param res5c_weight_2 input tensor, [f32 [2048, 512, 1, 1] @ ABCD]
 * @param res5c_bias_2 input tensor, [f32 [2048] @ A]
**/
extern "C" void rn50_backbone_bs4(int8_t* __restrict__ backbone_output,int64_t* __restrict__ input_pointers,float* __restrict__ final_out, float* __restrict__ res2a_weight_b, float* __restrict__ res2a_bias_b, float* __restrict__ res2a_weight_0, float* __restrict__ res2a_bias_0, float* __restrict__ res2a_weight_1, float* __restrict__ res2a_bias_1, float* __restrict__ res2a_weight_2, float* __restrict__ res2a_bias_2, float* __restrict__ res2b_weight_0, float* __restrict__ res2b_bias_0, float* __restrict__ res2b_weight_1, float* __restrict__ res2b_bias_1, float* __restrict__ res2b_weight_2, float* __restrict__ res2b_bias_2, float* __restrict__ res2c_weight_0, float* __restrict__ res2c_bias_0, float* __restrict__ res2c_weight_1, float* __restrict__ res2c_bias_1, float* __restrict__ res2c_weight_2, float* __restrict__ res2c_bias_2, float* __restrict__ res3a_weight_b, float* __restrict__ res3a_bias_b, float* __restrict__ res3a_weight_0, float* __restrict__ res3a_bias_0, float* __restrict__ res3a_weight_1, float* __restrict__ res3a_bias_1, float* __restrict__ res3a_weight_2, float* __restrict__ res3a_bias_2, float* __restrict__ res3b_weight_0, float* __restrict__ res3b_bias_0, float* __restrict__ res3b_weight_1, float* __restrict__ res3b_bias_1, float* __restrict__ res3b_weight_2, float* __restrict__ res3b_bias_2, float* __restrict__ res3c_weight_0, float* __restrict__ res3c_bias_0, float* __restrict__ res3c_weight_1, float* __restrict__ res3c_bias_1, float* __restrict__ res3c_weight_2, float* __restrict__ res3c_bias_2, float* __restrict__ res3d_weight_0, float* __restrict__ res3d_bias_0, float* __restrict__ res3d_weight_1, float* __restrict__ res3d_bias_1, float* __restrict__ res3d_weight_2, float* __restrict__ res3d_bias_2, float* __restrict__ res4a_weight_b, float* __restrict__ res4a_bias_b, float* __restrict__ res4a_weight_0, float* __restrict__ res4a_bias_0, float* __restrict__ res4a_weight_1, float* __restrict__ res4a_bias_1, float* __restrict__ res4a_weight_2, float* __restrict__ res4a_bias_2, float* __restrict__ res4b_weight_0, float* __restrict__ res4b_bias_0, float* __restrict__ res4b_weight_1, float* __restrict__ res4b_bias_1, float* __restrict__ res4b_weight_2, float* __restrict__ res4b_bias_2, float* __restrict__ res4c_weight_0, float* __restrict__ res4c_bias_0, float* __restrict__ res4c_weight_1, float* __restrict__ res4c_bias_1, float* __restrict__ res4c_weight_2, float* __restrict__ res4c_bias_2, float* __restrict__ res4d_weight_0, float* __restrict__ res4d_bias_0, float* __restrict__ res4d_weight_1, float* __restrict__ res4d_bias_1, float* __restrict__ res4d_weight_2, float* __restrict__ res4d_bias_2, float* __restrict__ res4e_weight_0, float* __restrict__ res4e_bias_0, float* __restrict__ res4e_weight_1, float* __restrict__ res4e_bias_1, float* __restrict__ res4e_weight_2, float* __restrict__ res4e_bias_2, float* __restrict__ res4f_weight_0, float* __restrict__ res4f_bias_0, float* __restrict__ res4f_weight_1, float* __restrict__ res4f_bias_1, float* __restrict__ res4f_weight_2, float* __restrict__ res4f_bias_2, float* __restrict__ res5a_weight_b, float* __restrict__ res5a_bias_b, float* __restrict__ res5a_weight_0, float* __restrict__ res5a_bias_0, float* __restrict__ res5a_weight_1, float* __restrict__ res5a_bias_1, float* __restrict__ res5a_weight_2, float* __restrict__ res5a_bias_2, float* __restrict__ res5b_weight_0, float* __restrict__ res5b_bias_0, float* __restrict__ res5b_weight_1, float* __restrict__ res5b_bias_1, float* __restrict__ res5b_weight_2, float* __restrict__ res5b_bias_2, float* __restrict__ res5c_weight_0, float* __restrict__ res5c_bias_0, float* __restrict__ res5c_weight_1, float* __restrict__ res5c_bias_1, float* __restrict__ res5c_weight_2, float* __restrict__ res5c_bias_2) noexcept;

extern "C" void sc_init_rn50_backbone_bs4(float* conv1_weight, float* conv1_bias, float* fc_weight, float* fc_bias);