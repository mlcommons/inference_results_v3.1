# syntax = docker/dockerfile:experimental
# based onhttps://github.com/pytorch/pytorch/blob/master/Dockerfile
# 
# NOTE: To build this you will need a docker version > 18.06 with
#       experimental enabled and DOCKER_BUILDKIT=1
#
#       If you do not use buildkit you are not going to have a good time
#
#       For reference: 
#           https://docs.docker.com/develop/develop-images/build_enhancements/

ARG BASE_IMAGE=ubuntu:22.04
FROM ${BASE_IMAGE} AS dev-base
RUN apt-get update && apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    git \
    curl \
    vim \
    numactl \
    cmake \
    wget \
    findutils \
    build-essential \
    gcc-12 \
    g++-12 \
    libzstd-dev \
    libgtk2.0-dev \
    libgl1 \
    libxml2-dev \
    zlib1g-dev \
    libdata-dumper-simple-perl \
    && rm -rf /var/lib/apt/lists/* &&\
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 10 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 10 && \ 
    update-alternatives --set gcc "/usr/bin/gcc-12" && \
    update-alternatives --set g++ "/usr/bin/g++-12"
RUN echo "alias ll='ls -l'" >> /root/.bashrc
ENV PATH /opt/conda/bin:$PATH

FROM dev-base as conda
ARG PYTHON_VERSION=3.9
RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
    chmod +x ~/miniconda.sh && \
    ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} cmake==3.22.1 && \
    /opt/conda/bin/conda install -c conda-forge jemalloc==5.2.1 gperftools==2.10 pybind11==2.10.4 && \
    /opt/conda/bin/conda install -c intel mkl==2023.1.0 mkl-include==2023.1.0 intel-openmp==2023.1.0 && \
    /opt/conda/bin/conda install gcc=12.3 gxx=12.3 ninja==1.11.1 zlib -c conda-forge -y && \
    export CC=`which gcc` && export CXX=`which g++` && \
    /opt/conda/bin/conda clean -ya  && \
    pip3 install --pre torch==2.1.0.dev20230711+cpu torchvision==0.16.0.dev20230711+cpu torchaudio==2.1.0.dev20230711+cpu --index-url https://download.pytorch.org/whl/nightly/cpu && \
    pip install setuptools==58.2.0 && \
    pip install cmake==3.27.0 cpuid==0.0.11 nltk==3.8.1 evaluate==0.4.0 protobuf==3.20.3 absl-py==1.4.0 rouge-score==0.1.2 tqdm==4.65.0 numpy==1.25.2 cython==3.0.0 sentencepiece==0.1.99 accelerate==0.21.0 && \
    pip install optimum

# IPEX BUILD
ENV LD_LIBRARY_PATH "/opt/conda/lib":${LD_LIBRARY_PATH}

# CALIBRATION ENVIRONMENT
FROM conda as calibration
COPY --from=conda /opt/conda /opt/conda
WORKDIR /opt/workdir
COPY ./calibration/gpt-j/pytorch-cpu/INT4 calibration/gpt-j/pytorch-cpu/INT4
ENV CONDA_PREFIX "/opt/conda"
RUN cd /opt/workdir/calibration/gpt-j/pytorch-cpu/INT4 && \
    /opt/conda/bin/conda env create -n gpt-j-int4-quant-env -f quantization-env.yaml

FROM calibration AS build
COPY --from=conda /opt/conda /opt/conda
WORKDIR /opt/workdir
COPY ./code/gptj-99 code/gptj-99
COPY ./code/user_config.py code/user_config.py
ENV CONDA_PREFIX "/opt/conda"
RUN update-ca-certificates -f && \
    cd /opt/workdir/code/gptj-99/pytorch-cpu && mkdir gpt-j-env && cd gpt-j-env && \
    git clone --branch llm_feature_branch https://github.com/intel/intel-extension-for-pytorch ipex-cpu && \
    cd ipex-cpu && \
    cp /opt/workdir/code/gptj-99/pytorch-cpu/llm_feature_patch_ww33.patch . && \
    patch -p1 < llm_feature_patch_ww33.patch && \
    export IPEX_DIR=${PWD} && \
    git submodule sync && \
    git submodule update --init --recursive && \
    python setup.py clean && \
    python setup.py bdist_wheel 2>&1 | tee ipex-build.log && \
    python -m pip install --force-reinstall dist/*.whl && \
    python -m pip install transformers==4.28.1 && cd .. && \
    cd /opt/workdir/code/gptj-99/pytorch-cpu/gpt-j-env && \
    git clone https://github.com/mlcommons/inference.git mlperf_inference && \
    cd mlperf_inference && \
    export MLPERF_INFERENCE_ROOT=${PWD} && \
    git submodule update --init --recursive third_party/pybind/ && \
    cd loadgen && \
    python -m pip install . && \
    cd /opt/workdir/code/gptj-99/pytorch-cpu/utils && \
    python -m pip install .


#ENV LD_LIBRARY_PATH "/opt/conda/lib/python3.8/site-packages/lib/"
FROM dev-base as mp
COPY --from=build /opt/conda /opt/conda
COPY --from=build /opt/workdir /opt/workdir
WORKDIR /opt/workdir
ENV CONDA_PREFIX "/opt/conda"
